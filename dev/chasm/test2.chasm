;   ============= 
;   
;   CHIP-8 FOOD COLLECTION GAME
;
;   =============


.alias player_x 0x0
.alias player_y 0x1
.alias food_x 0x3
.alias food_y 0x4
.alias title_x 0x0
.alias title_y 0x1
.alias key 0x2
.alias keypress 0x5
.alias flag 0xF
.alias counter 0xE
.alias counter_x 0xA
.alias counter_y 0xB


.const start 0x6
.const up 0x5
.const left 0x7
.const down 0x8
.const right 0x9
.const font_height 0x4
.const font_space 0x5





; ------------ code --------------

main:
    hires
    cls
    ld title_x 0x1C
    ld title_y 0x15

    ldi title_1
    bigdraw title_x title_y
    addi title_x 0xF
    ldi title_2
    bigdraw title_x title_y
    addi title_x 0xF
    ldi title_3
    bigdraw title_x title_y
    addi title_x 0xF
    
    ldi title_4
    bigdraw title_x title_y
    addi title_x 0x10
    ldi title_5
    bigdraw title_x title_y



    ld title_x 0x15
    ld title_y 0x3B

    ldi c
    call draw_letter
    ldi o
    call draw_letter
    ldi l
    call draw_letter
    ldi l
    call draw_letter
    ldi e
    call draw_letter
    ldi c
    call draw_letter
    ldi t
    call draw_letter
    addi title_x font_space

    addi title_y 0xFF
    ld counter 0x1
    smallhex counter
    call draw_number
    ld counter 0x5
    smallhex counter
    call draw_number
    addi title_y 0x1
    addi title_x font_space

    ldi t
    call draw_letter
    ldi o
    call draw_letter
    addi title_x font_space

    ldi w
    call draw_letter
    addi title_x 0x1 ; the letter W in my font is 5px wide instead of 4, so i need to give an extra space
    ldi i
    call draw_letter
    ldi n
    call draw_letter
    ldi mark
    call draw_letter

    wait keypress
    jmp init



init:

    cls

    ld counter_x 0x75
    ld counter_y 0x0
    ld player_x 0x0
    ld player_y 0x0
    random food_x 0x7F
    random food_y 0x3F
    ld counter 0x0

    jmp loop


        ; main runtime loop 
loop:

    cls

    ; draw player, then food for this frame

    ldi player
    draw player_x player_y 0xF
    ldi food
    draw food_x food_y 0x8


    sne flag 0x1    ; if on this frame the food and player collide...
    call collision  ; ...a collision has occurred and we need to deal with it


                        ; get number sprite for current counter value (0-15)
                        ; TODO: display this value in decimal vs hexadecimal
    bighex counter 
    draw counter_x counter_y 0xA

    call check_movement ; move the player based on keyboard input (WASD)
    
    sne counter 0xF ; if the player has 15 food, win the game
    jmp end 

    ; ...else, loop again 
    jmp loop



check_movement:

    ld key up
    sknp key
    addi player_y 0xFF


    ld key down
    sknp key
    addi player_y 0x1


    ld key left
    sknp key
    addi player_x 0xFF


    ld key right
    sknp key
    addi player_x 0x1

    ret



draw_letter:

    draw title_x title_y font_height
    addi title_x font_space

    ret

draw_number:

draw title_x title_y 5
addi title_x font_space

ret

collision:

    addi counter 0x1        ;increment the counter

    ldi food                
    draw food_x food_y 0x8  ;erase current food sprite
    

                            ;create new random x, y coords for food to be drawn @ on the next loop
    random food_x 0x7F
    random food_y 0x3F

    sound 0x5 ; beep

    ret

end:

    ; --- you win! ---

    sound 0x10
    
    cls
    ld title_x 0x1C
    ld title_y 0x15
    ldi win_1
    bigdraw title_x title_y
    addi title_x 0xF
    ldi win_2
    bigdraw title_x title_y
    addi title_x 0xF
    ldi win_3
    bigdraw title_x title_y
    addi title_x 0xF
    ldi win_4
    bigdraw title_x title_y

    ld title_x 0x15
    ld title_y 0x3B

    ldi p
    call draw_letter
    ldi r
    call draw_letter
    ldi e
    call draw_letter
    ldi s
    call draw_letter
    ldi s
    call draw_letter
    addi title_x font_space

    ldi tick
    call draw_letter
    ldi e
    call draw_letter
    ldi tick
    call draw_letter
    addi title_x font_space

    ldi t
    call draw_letter
    ldi o
    call draw_letter
    addi title_x font_space

    ldi r
    call draw_letter
    ldi e
    call draw_letter
    ldi s
    call draw_letter
    ldi e
    call draw_letter
    ldi t
    call draw_letter
    ldi mark
    call draw_letter

    ld key start 
    
halt:

    sknp key ; press 'E' to restart
    jmp main

    jmp halt







; ----------- sprite data ------------

player:
    .byte 0x70 0x88 0x88 0x88 0x70 0x20 0xF8 0x20 0x20 0x20 0x50 0x88 0x00 0x00 0x00

food:
    .byte 0x0C 0x1C 0x78 0xCC 0x84 0x84 0xCC 0x78


title_1:
    .byte 0x04 0x00 0x0C 0x00 0x0C 0x00 0x0A 0x00 0x0A 0x00 0x12 0x00 0x12 0x10 0x12 0x3C 0x3A 0x26 0x26 0x33 0x22 0x18 0x42 0x0C 0x43 0x06 0xC1 0x02 0x81 0x62 0x81 0x3E
title_2:
    .byte 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x1F 0x00 0x61 0x0E 0x41 0x1B 0x41 0x11 0x41 0x11 0x43 0x11 0x7C 0x11 0x40 0x1E 0x40 0x00 0x40 0x00
title_3:
    .byte 0x10 0x00 0x10 0x00 0x10 0x00 0x10 0x00 0x10 0x00 0x10 0x00 0x10 0x00 0x10 0x00 0x10 0x00 0x10 0x00 0x10 0x00 0x10 0x00 0x10 0x00 0x10 0x00 0x10 0x00 0x10 0x00
title_4:
    .byte 0x00 0x00 0x00 0x00 0x00 0x00 0x78 0x00 0xC6 0x00 0x80 0x00 0x80 0x00 0x80 0x00 0x80 0x00 0x9F 0x3C 0x41 0x66 0x41 0x47 0x42 0x45 0x66 0x6D 0x3C 0x39 0x00 0x01
title_5:
    .byte 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0xEC 0x3C 0xBE 0x68 0x92 0x58 0x92 0x70 0x82 0x60 0x82 0x20 0x82 0x10 0x80 0x1E 0x00 0x00

win_1:
    .byte 0x00 0x00 0x82 0x00 0x82 0x00 0xC2 0x00 0x44 0x00 0x6C 0x00 0x38 0x00 0x10 0x70 0x10 0xD8 0x11 0x08 0x11 0x08 0x11 0x08 0x11 0x08 0x11 0xF8 0x10 0x00 0x10 0x00
win_2:
    .byte 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x44 0x00 0x46 0x00 0x46 0x00 0x6F 0x00 0x29 0x00 0x31 0x00 0x00 0x00 0x00 0x00
win_3:
    .byte 0x00 0x40 0x80 0xC0 0xC0 0x80 0x40 0x80 0x40 0x80 0x40 0x80 0x40 0x88 0x20 0x80 0x21 0x80 0x21 0x08 0x35 0x08 0x15 0x08 0x1F 0x08 0x1A 0x08 0x18 0x08 0x00 0x08
win_4:
    .byte 0x00 0x00 0x00 0x08 0x00 0x08 0x00 0x08 0x00 0x08 0x00 0x08 0x00 0x08 0x00 0x04 0x00 0x04 0x70 0x04 0x50 0x04 0xD8 0x00 0x88 0x00 0x88 0x04 0x88 0x04 0x00 0x00

c:
    .byte 0x70 0xC0 0xC0 0x70 
o:
    .byte 0x60 0xD0 0xD0 0x60 
l:
    .byte 0xC0 0xC0 0xC0 0xF0
e:
    .byte 0xF0 0xE0 0xC0 0xF0
t:
    .byte 0xF0 0x60 0x60 0x60
w:
    .byte 0x88 0xA8 0xD8 0xD8
i:
    .byte 0xF0 0x60 0x60 0xF0
n:
    .byte 0xD0 0xD0 0xB0 0xB0
p:
    .byte 0xF0 0xD0 0xF0 0xC0
r:
    .byte 0xE0 0xD0 0xE0 0xD0
s:
    .byte 0xF0 0xC0 0x30 0xF0
mark:
    .byte 0x80 0x80 0x00 0x80
tick:
    .byte 0x40 0x40 0x00 0x00