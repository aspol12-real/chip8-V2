#pragma once

#include <cstdint>
#include <iostream>
#include <vector>
#include <fstream>
#include <cstdlib>
#include <ctime>

#include "graphics.hpp"

const int CHIP8_SIZE = 4096;
const int XO_CHIP_SIZE = 65535;
const int MEGACHIP_SIZE = 33550000;
const int STACK_SIZE = 16;

class cpu {
    private:


        uint8_t mem[MEGACHIP_SIZE]; //65kb memory space (XO-CHIP spec)
        uint16_t stack[STACK_SIZE];
        uint8_t v[16]; //16 8-bit registers v0-vF
        uint8_t flags_storage[16];

        uint16_t pc; //16-bit program counter
        uint16_t sp; //16-bit stack pointer
        uint32_t I;  //16-bit memory pointer


        uint8_t font_data[240] = {
        
            // regular characters 0-F

            0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
            0x20, 0x60, 0x20, 0x20, 0x70, // 1
            0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
            0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
            0x90, 0x90, 0xF0, 0x10, 0x10, // 4
            0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
            0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
            0xF0, 0x10, 0x20, 0x40, 0x40, // 7
            0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
            0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
            0xF0, 0x90, 0xF0, 0x90, 0x90, // A
            0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
            0xF0, 0x80, 0x80, 0x80, 0xF0, // C
            0xE0, 0x90, 0x90, 0x90, 0xE0, // D
            0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
            0xF0, 0x80, 0xF0, 0x80, 0x80, // F
                                          
            //BIG HEX 0-F
            0x7C, 0xC6, 0xCE, 0xDE, 0xD6, 0xF6, 0xE6, 0xC6, 0x7C, 0x00, //0
            0x10, 0x30, 0xF0, 0x30, 0x30, 0x30, 0x30, 0x30, 0xFC, 0x00, //1
            0x78, 0xCC, 0xCC, 0x0C, 0x18, 0x30, 0x60, 0xCC, 0xFC, 0x00, //2
            0x78, 0xCC, 0x0C, 0x0C, 0x38, 0x0C, 0x0C, 0xCC, 0x78, 0x00, //3
            0x0C, 0x1C, 0x3C, 0x6C, 0xCC, 0xFE, 0x0C, 0x0C, 0x1E, 0x00, //4
            0xFC, 0xC0, 0xC0, 0xC0, 0xF8, 0x0C, 0x0C, 0xCC, 0x78, 0x00, //5
            0x38, 0x60, 0xC0, 0xC0, 0xF8, 0xCC, 0xCC, 0xCC, 0x78, 0x00, //6
            0xFE, 0xC6, 0xC6, 0x06, 0x0C, 0x18, 0x30, 0x30, 0x30, 0x00, //7
            0x3C, 0x7E, 0xC3, 0xC3, 0x7E, 0x7E, 0xC3, 0xC3, 0x7E, 0x3C, //8
            0x3C, 0x7E, 0xC3, 0xC3, 0x7F, 0x3F, 0x03, 0x03, 0x3E, 0x7C, //9
            0x7E, 0xFF, 0xC3, 0xC3, 0xC3, 0xFF, 0xFF, 0xC3, 0xC3, 0xC3, //A
            0xFC, 0xFC, 0xC3, 0xC3, 0xFC, 0xFC, 0xC3, 0xC3, 0xFC, 0xFC, //B
            0x3C, 0xFF, 0xC3, 0xC0, 0xC0, 0xC0, 0xC0, 0xC3, 0xFF, 0x3C, //C
            0xFC, 0xFE, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xFE, 0xFC, //D
            0xFF, 0xFF, 0xC0, 0xC0, 0xFF, 0xFF, 0xC0, 0xC0, 0xFF, 0xFF, //E
            0xFF, 0xFF, 0xC0, 0xC0, 0xFF, 0xFF, 0xC0, 0xC0, 0xC0, 0xC0, //F
        };

        //opcode methods

        void call(uint16_t nnn, uint16_t opcode);
        void ret();
        void jeq(uint8_t a, uint8_t b);
        void jneq(uint8_t a, uint8_t b);
        void reg_to_mem(uint8_t x, uint8_t y);
        void reg_from_mem(uint8_t x, uint8_t y);
        void reg_to_flags(uint8_t x, uint8_t y);
        void reg_from_flags(uint8_t x, uint8_t y);
        void add(uint8_t x, uint8_t y);
        void sub_xy(uint8_t x, uint8_t y);
        void sub_yx(uint8_t x, uint8_t y);
        void shift_left(uint8_t x, uint8_t y);
        void shift_right(uint8_t x, uint8_t y);
        void gen_rand(uint8_t nn, uint8_t x, uint8_t random);
        void word_index();
        void small_hex(uint8_t x);
        void big_hex(uint8_t x);
        void big_skip_check();
        void BCD(uint8_t x);
        void wait(uint8_t x);


        //megachip opcodes
        void ld_i_nnnnnn(uint8_t nn);
        void ld_i_palette(uint8_t nn);

    public:

        graphics* scr_ptr = nullptr; 

        void set_graphics_ptr(graphics* ptr) {
            scr_ptr = ptr;
        }

        uint8_t* get_memory_ptr() {
            return mem;
        }
        cpu() {}
        uint8_t sound; //8-bit sound timer
        uint8_t delay; //8-bit delay timer

        bool keys[16];

        void init();
        void execute();
        void load_rom(std::string rom);
        void tick_timers();
        
};
